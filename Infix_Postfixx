#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
int top=-1,size=50;
char infix[50],postfix[50],stack[50];

int popevl()
{
	if(top == -1)
	{
		printf("invalid expression");
		exit(0);
	}
	return stack[top--];
}
void pushevl(int n)
{
	if(top== size-1)
	{
		printf("stack is full");
		return;
	}
	stack[++top]=n;
}
void push(char n)
{
	if (top== size -1)
	{
		printf("stack is full");
		return;
	}
	stack[++top]=n;
}

char pop()
{
	if(top==-1)
	{
		printf("invalid expression");
		exit(0);
	}
	return stack[top--];
}

int isoperator(char c)
{
	return(c=='+'||c=='-'||c=='*'||c=='/'||c=='^');
}

int precedence(char c)
{
	if(c=='+'||c=='-')
	{
		return 1;
	}
	else if(c=='/'||c=='*')
	{
		return 2;
	}
	else if(c=='^')
	{
		return 3;
	}
	else 
	{
		return 0;
	}
}


void infixtopostfix()
{
	char symbol,next;
	int i,j=0;
	for(i=0;i<strlen(infix);i++)
	{
		symbol = infix[i];
		if(symbol != ' '|| symbol!='\t')
		{
			if(isdigit(symbol))
			{
				while(isdigit(symbol))
				{
					postfix[j++]=symbol;
					symbol=infix[++i];
				}
				postfix[j++]= ' ';
				i--;
			}
			else if(symbol == '(')
			{
				push(symbol);
			}
			else if(symbol == ')')
			{
				while((next=pop())!= '(')
				{
					postfix[j++]=next;
				}
			}
			else if(isoperator(symbol))
			{
				while(top!=1 && precedence(stack[top])>=precedence(symbol))
				{
					postfix[j++]=pop();
				}
				push(symbol);
			}
		}
	}
	while(top!=-1)
	{
		postfix[j++]=pop();
	}
	postfix[j]='\0';
}
int evaluatepostfix()
{
	int i,a,b;
	for(i=0;i<strlen(postfix);i++)
	{
		if(isdigit(postfix[i]))
		{
			int num=0;
			while(isdigit(postfix[i]))
			{
				num=num*10+(postfix[i++]- '0');
			}
			pushevl(num);
		}
		else if (isoperator(postfix[i]))
		{
			a=popevl();
			b=popevl();
			switch(postfix[i])
			{
				case '+':
					pushevl(b+a);
					break;
				case '-':
					pushevl(b-a);
					break;
				case '*':
					pushevl(b*a);
					break;
				case '/':
					if(a==0)
					{
						printf("division by '0' not possible");
					}
					else
					{
						pushevl(b/a);
						break;
					}
				case '^':
					pushevl(b^a);
					break;
			}
		}
	}
	return popevl();
}

void main()
{
	printf("enter the expression in infix form\n");
	scanf("%s",infix);
	infixtopostfix();
	printf("the postfix expression is : %s",postfix);
	printf("the evaluated expression is : %d",evaluatepostfix());
}
